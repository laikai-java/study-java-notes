/**
 * 设计思想
 *
 * 所谓缓存，必须要有读 + 写两个操作，按照命中率的思路考虑，写操作 + 读操作时间复杂度都需要为 O(1)
 * 特性要求
 *    必须要有顺序之分，一区分最近使用的和很久没有使用的数据排序。
 *    写和读操作一次搞定。
 *    如果容量 (坑位) 满了要删除最不常用的数据，每次新访问还要把新的数据插入到队头 (按照业务你自己设定左右那一边是队头)
 * 查找快、插入快、删除快，且还需要先后排序 ----------> 什么样的数据结构可以满足这个问题？
 *
 * 你是否可以在 O(1) 时间复杂度内完成这两种操作？
 *
 * 如果一次就可以找到，你觉得什么数据结构最合适？
 *
 * 答案：LRU 的算法核心是哈希链表
 *
 * 编码手写如何实现 LRU
 *
 * 本质就是 HashMap + DoubleLinkedList
 *
 * 时间复杂度是 O(1)，哈希表 + 双向链表的结合体
 */
package com.lk.algorithms.lru;